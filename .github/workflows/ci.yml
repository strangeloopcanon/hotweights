name: CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install
        run: |
          python -m pip install -U pip
          pip install -e .[dev]

      - name: Lint (ruff)
        run: |
          pip install ruff
          ruff --format=github --select=E,F,I,B,UP --ignore=E501 . || true

      - name: Run tests
        run: |
          pytest -q

      - name: Build small plan and run bench (fallback)
        run: |
          mkdir -p demo_ckpt_a demo_ckpt_b
          python - << 'PY'
import os, json, pathlib
pathlib.Path('demo_ckpt_a/a.bin').write_bytes(b'a'*1024)
pathlib.Path('demo_ckpt_b/a.bin').write_bytes(b'a'*1024)
pathlib.Path('demo_ckpt_b/b.bin').write_bytes(b'b'*2048)
PY
          hotweights publish --checkpoint demo_ckpt_a --version v0 --output m_prev.json
          hotweights publish --checkpoint demo_ckpt_b --version v1 --output m_next.json
          hotweights plan --prev m_prev.json --next m_next.json --bucket-mb 1 --output plan.json
          python bench/bench_e2e.py --plan plan.json --fallback --output bench.json

      - name: Inspect bench (non-blocking)
        run: |
          python - << 'PY'
import json
try:
  data = json.load(open('bench.json'))
  seconds = data.get('seconds')
  bytes_ = data.get('bytes')
  mode = data.get('mode')
  print(f"bench: mode={mode} seconds={seconds} bytes={bytes_}")
  if seconds is None or bytes_ is None:
    print('warning: bench.json missing fields')
except Exception as e:
  print(f'warning: failed to parse bench.json: {e}')
PY

      - name: Upload bench artifact
        uses: actions/upload-artifact@v4
        with:
          name: bench
          path: bench.json
